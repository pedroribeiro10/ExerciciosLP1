//Exercicio 1
-O que é um tipo de dados?
  Um tipo de dados é uma classificação de um dado de um programa, o qual pode ser guardado em uma variável e esse tipo define o que pode ser feito com aquele valor. 
  Exemplos: Inteiros (int), Reais (float), Texto (string), etc.

-Para que servem os tipos?
  Servem para realizar o controle das operações válidas, alocar diferentes espaços na memória, prevenir erros, controlar a velocidade das operações.
  No geral, servem para ter a garantia que os dados do programa sejam utilizados corretamente de acordo com o tipo.

//Exercicio 2
-O que você espera que aconteça ao compilar o programa? Por quê?
  O programa não irá compilar corretamente pois há erro na subtração. 
  Pois nesse caso o 100 é um inteiro e "10" é interpretado como uma string (em C sendo um ponteiro para char),
  sendo impossível de realizar uma subtração de um dado do tipo inteiro por uma "string".

-Quais são os tipos dos operandos na operação de subtração?
  100 é do tipo (int)
  "10" é do tipo (const char), que é um ponteiro para char, já que em C não existe o tipo string.

-Transcreva a mensagem de erro de compilação e a explique.
  error: invalid operands to binary - (have 'int' and 'char *')
  Isso significa que o operador (-) não foi utilizado de maneira correta,
  que foi utilizado subtraindo um inteiro de um ponteiro para char, o que é incorreto na linguagem C.

//Exercicio 3
#include <stdio.h>
int main () {
    int temps[50], i, acima=0;
    float media, soma=0;
    for (i=0;i<50;i++) {
        do {
        printf("Escreva a temperatura %d: ", i+1);
        scanf("%d", &temps[i]);
        if(temps[i]<-100 || temps[i] >100) {
        printf("Temperatura inválida! Deve ser entre -100 e 100!\n");
        }
        } while(temps[i]<-100 || temps[i]>100);
        soma+=temps[i];
    }
    media=(soma/50.0);
    for (i=0;i<50;i++) {
        if(temps[i]>media) {
            acima+=1;
        }
    }
    printf("A média das temperaturas é: %0.2f\n",media);
    printf("A quantitade de temperaturas acima da média é: %d\n", acima);
 return 0;
}

//Exercicio 4
-Qual a diferença da tipagem estática e dinâmica?
  A diferença é que na tipagem estática você deve dizer qual o tipo da variável especificamente antes de utilizar ela.  
  Se você utilizar outro tipo, diferente da declaração definida antes, o programa não é compilado.
  Exemplo em C:
    int a;
    a= 10; //OK, a é inteiro pois 10 é inteiro.
    a= "letra"; //Não funciona pois "letra" não é inteiro, logo a também não.
  Já na tipagem dinâmica, o tipo da variável não precisa ser declarado antes, o tipo é reconhecido dependendo do que você coloca na variável.
  Ele pode mudar enquanto o programa é executado. 
  Exemplo em Python:
    a= 10; //OK, a é inteiro pois 10 é inteiro.
    a= "letra" //OK, a agora é string pois "letra" é uma string.

-Dê exemplos de linguagens que usem tipagem estática e exemplos de linguagens que usem tipagem dinâmica.
  Estática: C, C++, Java
  Dinâmica: Python, JavaScript, PHP

-Por quê uma linguagem com tipagem estática é tipicamente mais rápida do que uma com tipagem dinâmica? Justifique usando um exemplo.
  A estática é tipicamente mais rápida pois como o tipo de dados já é pré definido, se tiver erro, o programa não compila.
  Mas quando já compilado, os tipos já estão definidos, então o programa não tem que ficar verificando toda hora o tipo das variáveis utilizadas, economizando tempo.
  Já a dinâmica é mais lenta justamente por ter que verificar, durante a execução do programa, o tipo de dados da variável, que pode mudar ao longo do programa, gastando mais tempo.

Exemplo:
//PROGRAMA EM C
#include <stdio.h>
int main () {
  int a, b, subtração;
  a=50;
  b=60;
  subtração=a-b;
  printf("%d", subtração);
return 0;
}
//NESSE PROGRAMA, O COMPILADOR JÁ REALIZA DIRETO A SUBTRAÇÃO DE INTEIROS POIS JÁ SABE ANTECIPADAMENTE OS TIPOS DOS DADOS.

//PROGRAMA EM PYTHON
a=50
b=60
subtracao=a-b
print(subtracao)
//NESSE PROGRAMA, O INTERPRETADOR VERIFICA QUE SÃO NÚMEROS, QUE SÃO INTEIROS E QUE É UMA SUBTRAÇÃO DURANTE A EXECUÇÃO DO PROGRAMA, GASTANDO MAIS TEMPO.
